- name: "Basic ansible setup"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add aptitude needed by ansible"
      apt: name=aptitude

    - name: "Install https support for apt"
      apt: name=apt-transport-https

    - name: "Install python packaging and build-essential support"
      apt: name={{packages}}
      vars:
        packages:
        - libssl-dev
        - build-essential
        - python-dev
        - python3-dev
        - libffi-dev
        - checkinstall

    - name: Enable source URIs Xenial (16.04) to enable apt-get build-dep
      # hosts: xenial
      blockinfile:
        path: /etc/apt/sources.list
        backup: yes
        block: |
          deb-src http://jp.archive.ubuntu.com/ubuntu/ xenial main restricted
          deb-src http://jp.archive.ubuntu.com/ubuntu/ xenial-updates main restricted
          deb-src http://jp.archive.ubuntu.com/ubuntu/ xenial universe
          deb-src http://jp.archive.ubuntu.com/ubuntu/ xenial-updates universe
      when: ansible_distribution_release == 'xenial'

    - name: Enable source URIs Bionic (18.04) to enable apt-get build-dep
      # hosts: bionic
      blockinfile:
        path: /etc/apt/sources.list
        backup: yes
        block: |
          deb-src http://jp.archive.ubuntu.com/ubuntu/ bionic main restricted
          deb-src http://jp.archive.ubuntu.com/ubuntu/ bionic-updates main restricted
          deb-src http://jp.archive.ubuntu.com/ubuntu/ bionic universe
          deb-src http://jp.archive.ubuntu.com/ubuntu/ bionic-updates universe
      when: ansible_distribution_release == 'bionic'

    - name: Refresh apt sources
      apt: update_cache=yes upgrade=full cache_valid_time=3600

    - name: "Install build deps, should users want to build their own executables"
      apt: name={{packages}} update_cache=yes state=build-dep
      vars:
        packages:
          - python3
          - python3-numpy
          - python3-scipy
          - python
          - python-numpy
          - python-scipy

    - name: "Add python 3.X PPA (deadsnakes)"
      apt_repository:
        repo: "ppa:deadsnakes/ppa"
        state: present
        update_cache: yes

    - name: "Install python 3.6 itself"
      # hosts: xenial
      apt: name=python3.6
      when: ansible_distribution_release == 'xenial'

- name: "Update gcc"
  hosts: gpu
  become: yes
  tasks:
    - name: "Ensure gcc is updated"
      apt: name={{packages}} state=present
      vars:
        packages:
        - gcc
        - g++

- name: "Install up-to-date pip and pip3"
  hosts: gpu
  become: yes
  tasks:
    - name: Check to see if pip is already installed.
      command: "pip --version"
      ignore_errors: true
      changed_when: false # read-only task
      check_mode: no
      register: pip_is_installed

    - name: Check to see if pip3 is already installed.
      command: "pip3 --version"
      ignore_errors: true
      changed_when: false # read-only task
      check_mode: no
      register: pip3_is_installed

    - name: Remove apt installed pip
      apt: name=python-pip state=absent
      when: pip_is_installed

    - name: Remove apt installed pip3
      apt: name=python3-pip state=absent
      when: pip3_is_installed

    - name: Download get-pip.py
      get_url: url=https://bootstrap.pypa.io/get-pip.py dest=/tmp
      when: pip_is_installed.rc != 0
    
    - name: Install pip
      command: "python /tmp/get-pip.py"
      when: pip_is_installed.rc != 0

    - name: Install pip3
      command: "python3 /tmp/get-pip.py"
      when: pip_is_installed.rc != 0
    
    - name: Delete get-pip.py
      file: state=absent path=/tmp/get-pip.py

- name: "Install useful packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install various admin tools"
      apt: name={{packages}} install_recommends=yes
      vars:
        packages:
        - htop
        - iotop
        - environment-modules
        - parallel
        - lshw
        - gdisk
        - nano
        - vim
        - emacs
        - smartmontools
        - jq
        - aria2
        - ranger
        - ncdu
        - atop
        - unzip
        - zip
        - git
        - strace
        - mosh
        - vnstat

    - name: "Update apt cache and do a full full upgrade"
      apt: update_cache=yes upgrade=full cache_valid_time=3600

- name: "Install ansible"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add ansible ppa"
      apt_repository:
        repo: "ppa:ansible/ansible"
        state: present
        update_cache: yes

    - name: "Install ansible itself"
      apt: name=ansible

- name: "Machine learning dependencies"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add fortran opencv, gflags, lmdb, hdf5 support, etc."
      apt: name={{packages}}
      vars:
        packages:
        - gfortran
        - libatlas-base-dev
        - libleveldb-dev
        - libsnappy-dev
        - libhdf5-serial-dev
        - libgflags-dev
        - libgoogle-glog-dev
        - liblmdb-dev
        - libprotobuf-dev
        - libprotoc-dev
        - protobuf-compiler
    - name: "Add boost library."
      apt: name=libboost-all-dev install_recommends=yes

- name: "Update sox sound library"
  hosts: gpu
  become: yes
  tasks:
    - name: "Ensure sox is installed"
      apt: name={{packages}} state=present
      vars:
        packages:
        - sox
        - libsox-dev
        - libsox-fmt-all

- name: "Intel MKL library"
  hosts: gpu
  become: yes
  tasks:
    - name: "Add intel apt-key"
      apt_key:
        url: "https://apt.repos.intel.com/intel-gpg-keys/\
              GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB"

    - name: "Add intel mkl apt repository"
      apt_repository:
        repo: "deb https://apt.repos.intel.com/mkl all main"
        filename: "intel-mkl"
        update_cache: yes

    - name: "Install intel MKL libraries"
      apt: name={{packages}}
      vars:
        packages:
        - "intel-mkl-2019.0-045"
        # Previous:
        # - "intel-mkl-2018.2-046"

    - name: "Add MKL library to ld.so.d path"
      copy:
        dest: /etc/ld.so.conf.d/mkl.conf
        src: files/mkl/mkl.conf
      notify:
        - run ldconfig

  handlers:
    - name: run ldconfig
      command: ldconfig

- name: "Nvidia CUDA library"
  hosts: gpu
  become: yes
  vars:
    ubuntu_ver_str: "{{ 'ubuntu1604' if (ansible_distribution_release == 'xenial') else 'ubuntu1804' }}"
  tasks:
    - name: "Check if CUDA is present"
      #command: dpkg-query -W cuda-repo-ubuntu1604
      command: dpkg-query -W cuda-repo-{{ ubuntu_ver_str }}
      register: cuda_check_deb
      failed_when: cuda_check_deb.rc > 1
      changed_when: '"10" not in cuda_check_deb.stdout'

    - name: "Add nvidia apt-key"
      apt_key:
        url: "https://developer.download.nvidia.com/compute/cuda/repos/\
              {{ ubuntu_ver_str }}/x86_64/7fa2af80.pub"

    - name: "Download CUDA repo deb"
      apt:
        deb: "https://developer.download.nvidia.com/compute/cuda/repos/\
              {{ ubuntu_ver_str }}/x86_64/cuda-repo-{{ ubuntu_ver_str }}_10.0.130-1_amd64.deb"
      when: '"10" not in cuda_check_deb.stdout'

    #- name: "Add nvidia apt-key bionic"
    #  apt_key:
    #    url: "https://developer.download.nvidia.com/compute/cuda/repos/\
    #          ubuntu1804/x86_64/7fa2af80.pub"
    #  when: ansible_distribution_release = 'bionic'

    #- name: "Download CUDA repo deb bionic"
    #  apt:
    #    deb: "https://developer.download.nvidia.com/compute/cuda/repos/\
    #          ubuntu1804/x86_64/cuda-10-0_10.0.130-1_amd64.deb"
    #  when:
    #    - '"10" not in cuda_check_deb.stdout'
    #    - ansible_distribution_release == "bionic"

    - name: "Update apt-get cache"
      apt: update_cache=yes
      ignore_errors: yes
      when: '"10" not in cuda_check_deb.stdout'

    - name: "Install CUDA drivers"
      apt: name={{packages}} state=present
      vars:
        packages:
        - cuda-10-0
        # For the future
        # - cuda-9-2
        # - cuda-10
      when: '"9" not in cuda_check_deb.stdout'

- name: "Nvidia CUDNN and NCCL libraries"
  hosts: gpu
  become: yes
  vars:
    ubuntu_ver_str: "{{ 'ubuntu1604' if (ansible_distribution_release == 'xenial') else 'ubuntu1804' }}"
  tasks:
    - name: "Check if nvidia machine learning repo deb is present"
      command: dpkg-query -W nvidia-machine-learning-repo-{{ ubuntu_ver_str }}
      register: nvidia_ml_repo_check_deb
      failed_when: nvidia_ml_repo_check_deb.rc > 1
      changed_when: '"1" not in nvidia_ml_repo_check_deb.stdout'

    - name: "Add nvidia apt-key"
      apt_key:
        url: "https://developer.download.nvidia.com/compute/machine-learning/\
              repos/{{ ubuntu_ver_str }}/x86_64/7fa2af80.pub"
      when: '"1" not in nvidia_ml_repo_check_deb.stdout'

    - name: "Download nvidia machine learning repo deb"
      apt:
        deb: "https://developer.download.nvidia.com/compute/machine-learning/\
              repos/{{ ubuntu_ver_str }}/x86_64/\
              nvidia-machine-learning-repo-{{ ubuntu_ver_str }}_1.0.0-1_amd64.deb"
      when: '"1" not in nvidia_ml_repo_check_deb.stdout'

    - name: "Update apt-get cache"
      apt: update_cache=yes
      ignore_errors: yes
      when: '"1" not in nvidia_ml_repo_check_deb.stdout'

    - name: "Install cudnn and nccl"
      apt: name={{packages}} state=present
      vars:
        packages:
        - libnccl2
        - libnccl-dev
        - libcudnn7
        - libcudnn7-dev

- name: "Install useful pip python2 packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install recent numpy"
      pip: name=numpy
    - name: "Install recent scipy"
      pip: name=scipy
    - name: "Install useful pip pkgs"
      pip:
        name:
          - matplotlib
          - ipython
          - h5py
          - leveldb
          - networkx
          - nose
          - pandas
          - python-dateutil
          - protobuf
          - python-gflags
          - pyyaml
          - Pillow
          - six
          - seaborn
          - sh
          - jupyter

- name: "Install useful pip python3 packages"
  hosts: gpu
  become: yes
  tasks:
    - name: "Install pip3, python3-dev, and cffi"
      apt: name={{packages}}
      vars:
        packages:
        - python3-pip
        - python3-dev
        - python3-cffi
    - name: "Install wheel"
      pip: executable=pip3 name=wheel
    - name: "Install recent numpy"
      pip: executable=pip3 name=numpy
    - name: "Install recent scipy"
      pip: executable=pip3 name=scipy

    - name: "Install useful pip3 pkgs"
      pip:
        executable: pip3
        name:
        - scikit-image
        - matplotlib
        - ipython
        - h5py
        - leveldb
        - networkx
        - nose
        - pandas
        - python-dateutil
        - protobuf
        - python-gflags
        - pyyaml
        - Pillow
        - six
        - s-tui
        - seaborn
        - tensorflow-gpu
        - sh
        - jupyter

- name: "Build opencv from source"
  hosts: gpu
  become: true
  tasks:
    - name: "Check if usr local libopencv_core.so.3.3.1/4.0.1 exists"
      shell: |
        test -f /usr/local/lib/libopencv_core.so.3.3.1 && \
        test -f /usr/local/lib/libopencv_core.so.4.0.1 && \
        test -z "$(ldd /usr/local/lib/libopencv_imgcodecs.so | grep libgdal)"
      register: opencv_check
      failed_when: opencv_check.rc > 1
      changed_when: opencv_check.rc == 1

    - name: "Remove ubuntu opencv"
      apt: name={{packages}} state=absent
      vars:
        packages:
        - libopencv-dev
        - libopencv-calib3d-dev
        - libopencv-calib3d2.4
        - libopencv-contrib-dev
        - libopencv-contrib2.4
        - libopencv-core-dev
        - libopencv-core2.4
        - libopencv-features2d-dev
        - libopencv-features2d2.4
        - libopencv-flann-dev
        - libopencv-flann2.4
        - libopencv-gpu-dev
        - libopencv-gpu2.4
        - libopencv-highgui-dev
        - libopencv-highgui2.4
        - libopencv-imgproc-dev
        - libopencv-imgproc2.4
        - libopencv-legacy-dev
        - libopencv-legacy2.4
        - libopencv-ml-dev
        - libopencv-ml2.4
        - libopencv-objdetect-dev
        - libopencv-objdetect2.4
        - libopencv-ocl-dev
        - libopencv-ocl2.4
        - libopencv-photo-dev
        - libopencv-photo2.4
        - libopencv-stitching-dev
        - libopencv-stitching2.4
        - libopencv-superres-dev
        - libopencv-superres2.4
        - libopencv-ts-dev
        - libopencv-ts2.4
        - libopencv-video-dev
        - libopencv-video2.4
        - libopencv-videostab-dev
        - libopencv-videostab2.4
        - libopencv2.4-java
        - libopencv2.4-jni
        - opencv-data
      when: opencv_check.rc == 1



    - name: "Install opencv prerequisite libraries"
      apt: name={{packages}}
      vars:
        packages:
        - build-essential
        - cmake
        - git 
        - libgtk2.0-dev
        - pkg-config
        - ffmpeg
        - qtbase5-dev
        - libgtkglext1-dev
        - libvtk6-dev
        - zlib1g-dev
        - libjpeg-dev
        - libwebp-dev
        - libpng-dev
        - libtiff-dev
        - libtiff5-dev
        - libopenexr-dev
        - libgdal-dev
        - libdc1394-22-dev
        - libavcodec-dev
        - libavformat-dev
        - libswscale-dev
        - libtheora-dev
        - libtbb2
        - libtbb-dev
        - libvorbis-dev
        - libxvidcore-dev
        - libx264-dev
        - libgstreamer1.0-dev
        - libgstreamer-plugins-base1.0-dev
        - libfaac-dev
        - libmp3lame-dev
        - yasm
        - libopencore-amrnb-dev
        - libopencore-amrwb-dev
        - libv4l-dev
        - libxine2-dev
        - libtbb-dev
        - libeigen3-dev
        - python-dev
        - python3-dev
        - python-tk
        - python3-tk
        - ant
        - default-jdk
        - doxygen

    - name: "Erase temp build directory"
      file: path=/tmp/ansible-opencv-build state=absent
      when: opencv_check.rc == 1

    - name: "Create temp build directory"
      file: path=/tmp/ansible-opencv-build state=directory
      when: opencv_check.rc == 1

    - name: "Download opencv 4.0.1 sources"
      unarchive:
        src: https://github.com/opencv/opencv/archive/4.0.1.zip
        dest: /tmp/ansible-opencv-build
        remote_src: yes
      when: opencv_check.rc == 1

    - name: "Build and install opencv"
      shell: |
        mkdir build
        cd build
        cmake \
            -D CMAKE_BUILD_TYPE=RELEASE \
            -D CMAKE_INSTALL_PREFIX=/usr/local \
            -D FORCE_VTK=ON \
            -D WITH_TBB=ON \
            -D WITH_V4L=ON \
            -D WITH_QT=ON \
            -D WITH_OPENGL=ON \
            -D WITH_CUBLAS=ON \
            -D CUDA_NVCC_FLAGS="-D_FORCE_INLINES --expt-relaxed-constexpr" \
            -D WITH_GDAL=OFF \
            -D WITH_XINE=ON \
            -D WITH_GSTREAMER=ON \
            -D BUILD_NEW_PYTHON_SUPPORT=ON \
            -D BUILD_TESTS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_DOCS=ON \
            -D PYTHON2_EXECUTABLE=/usr/bin/python \
            -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
            -D BUILD_EXAMPLES=ON ..
        make clean
        make -j12
        checkinstall --default --backup=no --deldoc=yes \
          --install=yes --pkgname=libopencv-dev --pkgversion='4.0.1'
      args:
        chdir: /tmp/ansible-opencv-build/opencv-4.0.1
      register: opencv_build
      failed_when: opencv_build.rc > 0
      when: opencv_check.rc == 1
      notify: run ldconfig

    - name: "Verify installation"
      stat: path=/usr/local/lib/libopencv_core.so.4.0.1
      register: libopencv_verify
      failed_when: not libopencv_verify.stat.exists

  handlers:
    - name: run ldconfig
      command: ldconfig

- name: "Set up common login environment variables"
  hosts: gpu
  become: yes
  tasks:
    - name: "Copy profile.local"
      copy:
        dest: /etc/profile.local
        src: files/profile.local

    - name: "Setup path"
      blockinfile:
        path: /etc/environment
        backup: yes
        create: yes
        block: |
          PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/cuda/bin"
          JAVA_HOME="/usr/lib/jvm/default-java"
          LD_LIBRARY_PATH="/usr/local/cuda/lib64"
      